{"ast":null,"code":"/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\nimport * as utils from './utils'; // Browser shims.\n\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim'; // Shimming starts here.\n\nexport function adapterFactory({\n  window\n} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  }; // Shim browser if found.\n\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming chrome.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = chromeShim;\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming firefox.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = firefoxShim;\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimGetParameters(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming edge.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = edgeShim;\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window); // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n\n      logging('adapter.js shimming safari.'); // Export to the adapter global object visible in the browser.\n\n      adapter.browserShim = safariShim;\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimAudioContext(window);\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/avm/VisitorManagement/node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["utils","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","adapterFactory","window","options","shimChrome","shimFirefox","shimEdge","shimSafari","logging","log","browserDetails","detectBrowser","adapter","extractVersion","disableLog","disableWarnings","browser","shimPeerConnection","version","browserShim","shimGetUserMedia","shimMediaStream","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimGetStats","shimSenderReceiverGetStats","fixNegotiationNeeded","shimRTCIceCandidate","shimConnectionState","shimMaxMessageSize","shimSendThrowTypeError","removeAllowExtmapMixed","shimRemoveStream","shimSenderGetStats","shimReceiverGetStats","shimRTCDataChannel","shimAddTransceiver","shimGetParameters","shimCreateOffer","shimCreateAnswer","shimGetDisplayMedia","shimReplaceTrack","shimRTCIceServerUrls","shimCreateOfferLegacy","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimAudioContext"],"mappings":"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","sourcesContent":["/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\nimport * as utils from './utils';\r\n\r\n  // Browser shims.\r\nimport * as chromeShim from './chrome/chrome_shim';\r\nimport * as edgeShim from './edge/edge_shim';\r\nimport * as firefoxShim from './firefox/firefox_shim';\r\nimport * as safariShim from './safari/safari_shim';\r\nimport * as commonShim from './common_shim';\r\n\r\n// Shimming starts here.\r\nexport function adapterFactory({window} = {}, options = {\r\n  shimChrome: true,\r\n  shimFirefox: true,\r\n  shimEdge: true,\r\n  shimSafari: true,\r\n}) {\r\n  // Utils.\r\n  const logging = utils.log;\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const adapter = {\r\n    browserDetails,\r\n    commonShim,\r\n    extractVersion: utils.extractVersion,\r\n    disableLog: utils.disableLog,\r\n    disableWarnings: utils.disableWarnings\r\n  };\r\n\r\n  // Shim browser if found.\r\n  switch (browserDetails.browser) {\r\n    case 'chrome':\r\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\r\n          !options.shimChrome) {\r\n        logging('Chrome shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      if (browserDetails.version === null) {\r\n        logging('Chrome shim can not determine version, not shimming.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming chrome.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = chromeShim;\r\n\r\n      chromeShim.shimGetUserMedia(window);\r\n      chromeShim.shimMediaStream(window);\r\n      chromeShim.shimPeerConnection(window);\r\n      chromeShim.shimOnTrack(window);\r\n      chromeShim.shimAddTrackRemoveTrack(window);\r\n      chromeShim.shimGetSendersWithDtmf(window);\r\n      chromeShim.shimGetStats(window);\r\n      chromeShim.shimSenderReceiverGetStats(window);\r\n      chromeShim.fixNegotiationNeeded(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    case 'firefox':\r\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\r\n          !options.shimFirefox) {\r\n        logging('Firefox shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming firefox.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = firefoxShim;\r\n\r\n      firefoxShim.shimGetUserMedia(window);\r\n      firefoxShim.shimPeerConnection(window);\r\n      firefoxShim.shimOnTrack(window);\r\n      firefoxShim.shimRemoveStream(window);\r\n      firefoxShim.shimSenderGetStats(window);\r\n      firefoxShim.shimReceiverGetStats(window);\r\n      firefoxShim.shimRTCDataChannel(window);\r\n      firefoxShim.shimAddTransceiver(window);\r\n      firefoxShim.shimGetParameters(window);\r\n      firefoxShim.shimCreateOffer(window);\r\n      firefoxShim.shimCreateAnswer(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'edge':\r\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\r\n        logging('MS edge shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming edge.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = edgeShim;\r\n\r\n      edgeShim.shimGetUserMedia(window);\r\n      edgeShim.shimGetDisplayMedia(window);\r\n      edgeShim.shimPeerConnection(window);\r\n      edgeShim.shimReplaceTrack(window);\r\n\r\n      // the edge shim implements the full RTCIceCandidate object.\r\n\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'safari':\r\n      if (!safariShim || !options.shimSafari) {\r\n        logging('Safari shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming safari.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = safariShim;\r\n\r\n      safariShim.shimRTCIceServerUrls(window);\r\n      safariShim.shimCreateOfferLegacy(window);\r\n      safariShim.shimCallbacksAPI(window);\r\n      safariShim.shimLocalStreamsAPI(window);\r\n      safariShim.shimRemoteStreamsAPI(window);\r\n      safariShim.shimTrackEventTransceiver(window);\r\n      safariShim.shimGetUserMedia(window);\r\n      safariShim.shimAudioContext(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    default:\r\n      logging('Unsupported browser!');\r\n      break;\r\n  }\r\n\r\n  return adapter;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}