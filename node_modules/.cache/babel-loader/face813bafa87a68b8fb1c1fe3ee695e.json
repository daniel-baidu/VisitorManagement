{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\avm\\\\VisitorManagement\\\\src\\\\components\\\\Admin\\\\ResetPassword.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { resetPassword } from \"../../actions/adminActions\";\n\nclass ResetPassword extends Component {\n  constructor() {\n    super();\n\n    this.handleOnChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleOnSubmit = event => {\n      event.preventDefault();\n      const {\n        password,\n        confirmPassword\n      } = this.state;\n      const token = this.props.location.search.substr(7);\n      const userPassDetails = {\n        password,\n        confirmPassword,\n        token\n      };\n      const {\n        resetPassword,\n        history\n      } = this.props;\n      resetPassword(userPassDetails, history);\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      if (nextProps.errors) {\n        const {\n          password,\n          confirmPassword\n        } = this.state;\n        this.setState({\n          password,\n          confirmPassword,\n          errors: nextProps.errors\n        });\n      }\n    };\n\n    this.state = {\n      password: \"\",\n      confirmPassword: \"\",\n      errors: {}\n    };\n  }\n\n  render() {\n    const {\n      password,\n      confirmPassword,\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reset-password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8 m-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"header-h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, \"Reset Password\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, \"Make sure both passwords match\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleOnSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      className: classnames(\"form-control form-control-lg\", {\n        \"is-invalid\": errors.password\n      }),\n      placeholder: \"Password\",\n      name: \"password\",\n      value: password,\n      onChange: this.handleOnChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }), errors.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      className: classnames(\"form-control form-control-lg\", {\n        \"is-invalid\": errors.confirmPassword\n      }),\n      placeholder: \"Confirm Password\",\n      name: \"confirmPassword\",\n      value: confirmPassword,\n      onChange: this.handleOnChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }), errors.confirmPassword && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, errors.confirmPassword)), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-info btn-block mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }))))));\n  }\n\n}\n\nResetPassword.propTypes = {\n  resetPassword: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  resetPassword\n})(ResetPassword);","map":{"version":3,"sources":["C:/Users/USER/Desktop/avm/VisitorManagement/src/components/Admin/ResetPassword.js"],"names":["React","Component","connect","PropTypes","classnames","resetPassword","ResetPassword","constructor","handleOnChange","event","setState","target","name","value","handleOnSubmit","preventDefault","password","confirmPassword","state","token","props","location","search","substr","userPassDetails","history","componentWillReceiveProps","nextProps","errors","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nimport { resetPassword } from \"../../actions/adminActions\";\r\n\r\nclass ResetPassword extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  handleOnChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { password, confirmPassword } = this.state;\r\n    const token = this.props.location.search.substr(7);\r\n    const userPassDetails = { password, confirmPassword, token };\r\n    const { resetPassword, history } = this.props;\r\n    resetPassword(userPassDetails, history);\r\n  };\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    if (nextProps.errors) {\r\n      const { password, confirmPassword } = this.state;\r\n      this.setState({\r\n        password,\r\n        confirmPassword,\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { password, confirmPassword, errors } = this.state;\r\n    return (\r\n      <div className=\"reset-password\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h1 className=\"header-h1\">Reset Password</h1>\r\n              <p className=\"lead text-center\">Make sure both passwords match</p>\r\n              <form onSubmit={this.handleOnSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.password,\r\n                    })}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={this.handleOnChange}\r\n                    required\r\n                  />\r\n                  {errors.password && (\r\n                    <div className=\"invalid-feedback\">{errors.password}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\", {\r\n                      \"is-invalid\": errors.confirmPassword,\r\n                    })}\r\n                    placeholder=\"Confirm Password\"\r\n                    name=\"confirmPassword\"\r\n                    value={confirmPassword}\r\n                    onChange={this.handleOnChange}\r\n                    required\r\n                  />\r\n                  {errors.confirmPassword && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.confirmPassword}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nResetPassword.propTypes = {\r\n  resetPassword: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { resetPassword })(ResetPassword);\r\n"]},"metadata":{},"sourceType":"module"}